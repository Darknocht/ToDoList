openapi: 3.1.0
info:
  title: To Do List API
  version: 1.0.0
  description: An API for managing a to do List.
paths:
  /tasks:
    get:
      tags:
      - tasks
      summary: Get All tasks from the json file
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
          description: The request was successful, and the server has returned the requested resource in the response body.
      parameters: []
      description: |-
        Get all tasks.
        A task has an **id**, a **title**, a **description** (optional) and a **status**.
      operationId: getAllTasksFromTheJsonFile
    post:
      tags:
      - tasks
      summary: Add a new task in the json file
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
          description: The request was successful, and a new resource was created.
        '400':
          $ref: '#/components/responses/BadRequest'
      parameters: []
      description: |-
        The new task must have:

        - a title, non empty String with max 100 characters
        - a description is optional but it has max 500 characters and do not contain Javascript Code with HTML tag script
        - a status between **todo**, **in-progress** and **done**

        The id is automatically given by the API.
      operationId: addANewTaskInTheJsonFile
components:
  schemas:
    Book:
      type: object
      required:
      - id
      - title
      - fullText
      - author
      properties:
        id:
          type: integer
          examples:
          - 12
          - 14
        title:
          type: string
          examples:
          - Pride and Prejudice
          - Moby-Dick
        author:
          $ref: '#/components/schemas/Author'
        fullText:
          type: string
          examples:
          - Lorem ipsum
    Author:
      type: object
      required:
      - id
      - name
      - address
      - city
      - numberOfBooksPublished
      properties:
        id:
          type: integer
          examples:
          - 1
          - 2
          - 3
        city:
          type: string
          examples:
          - New York
          - Boston
        name:
          type: string
          examples:
          - J.K. Rowling
          - Henry Miller
        address:
          type: string
          examples:
          - Lorem ipsum
        numberOfBooksPublished:
          type: string
          examples:
          - '1'
          - '3'
          - '10'
      description: Creator of books.
    BookCreate:
      type: object
      required:
      - fullText
      - authorId
      - title
      properties:
        title:
          type: string
          examples:
          - Lorem ipsum
        authorId:
          type: integer
          examples:
          - 1
          - 2
          - 3
        fullText:
          type: string
          examples:
          - Lorem ipsum
      description: Data transfer object for creating a new Book.
      x-fiddle-dto-info:
        baseSchemaName: Book
    BookSummary:
      type: object
      required:
      - id
      - author
      - title
      properties:
        id:
          type: number
          examples:
          - 1
          - 2
          - 3
        title:
          type: string
          examples:
          - Lorem ipsum
        author:
          $ref: '#/components/schemas/Author'
      x-fiddle-dto-info:
        baseSchemaName: Book
  responses:
    Conflict:
      content:
        application/json:
          schema:
            type: object
            required:
            - message
            properties:
              message:
                type: string
                examples:
                - Lorem ipsum
      description: The request could not be completed due to a conflict with the current state of the resource. Resolve the conflict and try again.
    NotFound:
      content:
        application/json:
          schema:
            type: object
            required:
            - message
            properties:
              message:
                type: string
                examples:
                - Lorem ipsum
      description: The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist.
    BadRequest:
      content:
        application/json:
          schema:
            type: object
            required:
            - message
            properties:
              message:
                type: string
                examples:
                - Lorem ipsum
      description: The server could not understand the request due to invalid syntax. The client should modify the request and try again.
    InternalServerErrror:
      content:
        application/json:
          schema:
            type: object
            required:
            - message
            properties:
              message:
                type: string
                examples:
                - Lorem ipsum
      description: The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists.
  parameters:
    title:
      in: query
      name: title
      style: form
      schema:
        type: string
        examples:
        - Pride and Prejudice
        - Moby-Dick
      explode: false
      required: false
      description: Filter the list of books according to the title.
    book_id:
      in: path
      name: book_id
      style: simple
      schema:
        type: integer
        examples:
        - 1
        - 2
        - 3
      explode: false
      description: Path parameter to retrieve books by.
      allowReserved: false
      allowEmptyValue: true
    author_id:
      in: query
      name: author_id
      style: form
      schema:
        type: integer
        examples:
        - 1
        - 2
        - 23
      explode: false
      description: Filter the list of books accodring to the `author_id`.
      allowReserved: false
      allowEmptyValue: false
tags:
- name: tasks
